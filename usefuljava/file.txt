
 Previous TopicNext Topic 
The Java Compiler Javac Tool Options Use
The javac is the primary Java compiler included in the Java Development Kit (JDK). The javac tool is located in <JAVA_HOME>\jdk1.x\bin folder.

The Java compiler accepts Java language source code and produces byte codes that Java Virtual Machine (JVM) can understand.

The javac tool reads class and interface definitions, written in the Java programming language, and converts them into byte code class files. It can also process annotations in Java source files and classes.

The javac compiler itself is written in Java. The compiler can also be invoked programmatically.


Steps or Phases in Java Source Code Compilation
The Java compiler during compilation process goes through the following phases:

Java classes
The javac tool first checks whether provided java source file is available or not.

If the supplied java source file is not available then the Java compiler will give an error javac: file not found: filename.java.

If the supplied Java source file is available then the Java compiler loads the Java source code, checks the syntaxes for correctness and makes sure that there are no checked exceptions.

Then Java compiler translates the Java source code into the byte code and creates a separate class file( with .class extension) for each class to save the generated byte code.

Note: While generating the byte code from the Java source code the Java compiler does not consider the underlying operating system and processor architecture, that is why Java byte code is platform independent and architecture neutral.


How to compile multiple Java source code files at a time by javac?
You can compile multiple files at a time by three ways, they are:


1. For a small number of source files, simply list the file names on the command line separated by a blank space.

Example:

D:\> javac file1.java file2.java filen.java


2. For large number of Java source code files residing a same package use *.java. This will compile all the java source files of current package.

Example:

D:\> javac *.java


3. For a large number of source files residing in a same package or in different package, list the file names in a file, separated by blanks or line breaks. Then use the list file name on the javac command line, preceded by an @ character.

Example:

Create a simple text file myfiles.txt

Write the java source files names, each on a separate line like

file1.java

subpackage\file2.java

filen.java

D:\>javac @myfiles.txt

