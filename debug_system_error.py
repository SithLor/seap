import requests
import json, zlib
import os, shutil

from bs4 import BeautifulSoup
from pathlib import Path
from pprint import pprint

ERRORS_CODE = [
    'https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--0-499-',
    'https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--500-999-',
    'https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--1000-1299-',
    'https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--1300-1699-',
    'https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--1700-3999-',
    'https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--4000-5999-',
    'https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--6000-8199-',
    'https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--8200-8999-',
    'https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--9000-11999-',
    'https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--12000-15999-'
]

HOME = str(Path.home())

if os.name != 'nt':
    CACHE_FOLDER = "{}/.config/winerror".format(HOME)
else:
    CACHE_FOLDER = '{}\\.winerr'.format(HOME)

CACHE_FILE = "{}/cache.bin".format(CACHE_FOLDER)

def create_cache():
    headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}	

    print("Downloading system error list from Microsoft...")
    
    soups = []
    for error_site in ERRORS_CODE:
        html_page = requests.get(error_site, headers=headers)
        if html_page.status_code == 200:
            soup = BeautifulSoup(html_page.content.decode(), "html.parser")
            soups.append(soup)

    print("Processing {} pages...".format(len(soups)))

    cache_data = {}

    for soup in soups:
        error_table = soup.find('dl').contents
        error_table.pop()
        error_table.pop(0)
        
        error_status = ""

        for i in range(0, len(error_table), 4):
            error_status = error_table[i].find('p').find('span')['id']
            error_code   = error_table[i+2].find_all('p')[0].text
            error_description = error_table[i+2].find_all('p')[1].text
        
            error_code = error_code.split(' ')[0]

            cache_data[error_code] = {
                'description': error_description,
                'error_status': error_status
            }

    return cache_data

def escape_string(s):
    s = s.replace('"', '\\"').replace("'", "\\'")
    if not (s.startswith('"') and s.endswith('"')):
        s = '"' + s + '"'
    return s
def remove_line(filename, line_number):
    with open(filename, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    lines[line_number - 1] = '\n'  # Replace the line with a newline
    with open(filename, 'w', encoding='utf-8') as f:
        f.writelines(line.replace('\0', '') for line in lines)
def remove_null(filename):
    with open(filename, 'r', encoding='utf-8') as f:
        content = f.read()
    content = content.replace('\0', '')
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(content)
def write_to_rust_file_num(cache_data):
    PROJECT_DIR = 'fawn-app/src/windows/'
    with open(PROJECT_DIR+'system_error_num.rs', 'w') as f:
        f.write('#![allow(dead_code)]\n')
        f.write('#![allow(unused_variables)]\n')
        f.write('// This file is generated by debug_system_error.py\n')
        f.write('// Do not modify this file manually \n')
        f.write('\n')
        for error_code, error_info in cache_data.items():
            error_code = error_code.replace('ERROR_', '')
            f.write(f'/// {error_info["description"]}\n')
            f.write(f'pub const {error_info["error_status"]}: u32 = {error_code};\n')
def write_to_rust_file_hex(cache_data):
    PROJECT_DIR = 'fawn-app/src/windows/'
    with open(PROJECT_DIR+'system_error_hex.rs', 'w') as f:
        f.write('#![allow(dead_code)]\n')
        f.write('#![allow(unused_variables)]\n')
        f.write('// This file is generated by debug_system_error.py\n')
        f.write('// Do not modify this file manually\n')
        f.write('\n')
        for error_code, error_info in cache_data.items():
            error_code = error_code.replace('ERROR_', '')
            f.write(f'/// {error_info["description"]}\n')
            f.write(f'pub const {error_info["error_status"]}: u32 = {hex(int(error_code))};\n')

def write_to_rust_file_human(cache_data):
    PROJECT_DIR = 'fawn-app/src/windows/'
    with open(PROJECT_DIR+'system_error_human.rs', 'w') as f:
        f.write('#![allow(dead_code)]\n')
        f.write('#![allow(unused_variables)]\n')
        f.write('// This file is generated by debug_system_error.py\n')
        f.write('// Do not modify this file manually\n')
        f.write('\n')
        for error_code, error_info in cache_data.items():
            #error_code = error_code.replace('ERROR_', '')
            #f.write(
            #    f'pub const {error_info["error_status"]}: &str ='+ 
            #    escape_string(f'{error_info["description"]}')+
            #    f';\n'
            #)
            description = error_info["description"]
            capitalized_description = description[0].upper() + description[1:]
            f.write(
                f'pub const {error_info["error_status"]}: &str = '+
                escape_string(f'{capitalized_description}')+
                f';\n'
            )
        # Remove the this it dumb
        remove_line(PROJECT_DIR+'system_error_human.rs', 2536)
        remove_null(PROJECT_DIR+'system_error_human.rs')


if __name__ == '__main__':
    cache_data = create_cache()
    write_to_rust_file_num(cache_data)
    write_to_rust_file_hex(cache_data)
    write_to_rust_file_human(cache_data)
    print("Done! corret the errror")
